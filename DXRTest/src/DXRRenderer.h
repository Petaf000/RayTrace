// DXRRenderer.h
#pragma once

#include "DXRData.h"

class Renderer;

class DXRRenderer {
public:
    void Init(Renderer* renderer);
    void UnInit();
    void Render();

	UINT GetWidth() const { return m_width; }
	UINT GetHeight() const { return m_height; }
	
private:
    friend class Singleton<DXRRenderer>;

    DXRRenderer() = default;
    ~DXRRenderer() = default;

    // DXR初期化
    void InitializeDXR(ID3D12Device* device);
    void CreateRootSignature();
    void CreateRaytracingPipelineStateObject();
    void CreateShaderTables();
    void CreateOutputResource();
    void CreateLocalRootSignature();
    void CreateMaterialConstantBuffers();
    void UpdateMaterialData();

    // リソース作成
    void CreateAccelerationStructures();
    void CreateBLAS(BLASData& blasData, ComPtr<ID3D12Resource>& blasBuffer);
    void CreateTLAS(TLASData& tlasData);

    // DXCCompiler
    // 実行時HLSLコンパイル関数
    ComPtr<IDxcBlob> CompileShaderFromFile(const std::wstring& hlslPath,
        const std::wstring& entryPoint,
        const std::wstring& target = L"lib_6_5");

    // キャッシュ機能付きロード関数
    ComPtr<IDxcBlob> LoadOrCompileShader(const std::wstring& hlslPath,
        const std::wstring& entryPoint,
        const std::wstring& target = L"lib_6_5");

    // シェーダー関連
    ComPtr<IDxcBlob> LoadCSO(const std::wstring& filename);

    // ヘルパー関数
    void UpdateCamera();
    UINT AlignTo(UINT size, UINT alignment);

    // DXR関連オブジェクト
    ComPtr<ID3D12Device5> m_device;
    ComPtr<ID3D12GraphicsCommandList4> m_commandList;
    ComPtr<ID3D12CommandQueue> m_commandQueue;

    // ルートシグネチャとパイプライン
    ComPtr<ID3D12RootSignature> m_globalRootSignature;
    ComPtr<ID3D12StateObject> m_rtStateObject;
    // ローカルルートシグネチャ追加
    ComPtr<ID3D12RootSignature> m_localRootSignature;

    // アクセラレーション構造
    ComPtr<ID3D12Resource> m_topLevelAS;
    ComPtr<ID3D12Resource> m_topLevelASScratch;
    std::vector<ComPtr<ID3D12Resource>> m_bottomLevelAS;
    std::vector<ComPtr<ID3D12Resource>> m_bottomLevelASScratch;

    // シェーダーテーブル
    ComPtr<ID3D12Resource> m_rayGenShaderTable;
    ComPtr<ID3D12Resource> m_missShaderTable;
    ComPtr<ID3D12Resource> m_hitGroupShaderTable;

    // DXCコンパイラーインスタンス
    ComPtr<IDxcUtils> m_dxcUtils;
    ComPtr<IDxcCompiler3> m_dxcCompiler;
    ComPtr<IDxcIncludeHandler> m_includeHandler;

    // 出力リソース
    ComPtr<ID3D12Resource> m_raytracingOutput;
    ComPtr<ID3D12DescriptorHeap> m_descriptorHeap;

    // 定数バッファ
    struct SceneConstantBuffer {
        XMMATRIX viewProjectionMatrix;
        XMFLOAT4 cameraPosition;
        XMFLOAT4 lightPosition;
        XMFLOAT4 lightColor;
    };
    ComPtr<ID3D12Resource> m_sceneConstantBuffer;

    // マテリアル定数バッファ
    std::vector<ComPtr<ID3D12Resource>> m_materialConstantBuffers;

    // シェーダー識別子
    static const UINT s_shaderIdentifierSize = 32;
    static const UINT s_shaderTableEntrySize = 32;
    UINT s_hitGroupEntrySize = 32; // 動的に設定

    // ディメンション
    UINT m_width = 800;
    UINT m_height = 600;
};